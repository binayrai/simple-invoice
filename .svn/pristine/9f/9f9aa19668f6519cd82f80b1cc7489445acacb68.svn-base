package com.itexpertnepal.simpleinvoice.api.impl;

import com.itexpertnepal.simpleinvoice.api.BillerManager;
import com.itexpertnepal.simpleinvoice.api.CustomerManager;
import com.itexpertnepal.simpleinvoice.api.InvoiceManager;
import com.itexpertnepal.simpleinvoice.api.ProductManager;
import com.itexpertnepal.simpleinvoice.domain.Customer;
import com.itexpertnepal.simpleinvoice.domain.CustomerAccount;
import com.itexpertnepal.simpleinvoice.domain.CustomerService;
import com.itexpertnepal.simpleinvoice.domain.Invoice;
import com.itexpertnepal.simpleinvoice.domain.InvoiceDetails;
import com.itexpertnepal.simpleinvoice.domain.Product;
import com.itexpertnepal.simpleinvoice.repository.CustomerAccountRepository;
import com.itexpertnepal.simpleinvoice.repository.InvoiceRepository;
import com.itexpertnepal.simpleinvoice.utilities.StringUtls;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author binay
 */
@Service
@Transactional(readOnly = true)
class InvoiceManagerImpl implements InvoiceManager {

    @Autowired
    private InvoiceRepository invoiceRepository;

    @Autowired
    private CustomerAccountRepository customerAccountRepository;
    private static final Logger LOG = Logger.getLogger(InvoiceManagerImpl.class.getName());
    @Autowired
    private CustomerManager customerManager;
    @Autowired
    private BillerManager billerManager;
    @Autowired
    private ProductManager productManager;

    @Transactional
    public Invoice addNew(Invoice t) {
        if (t.getInvoiceDetailses().isEmpty()) {
            throw new IllegalArgumentException("Customer service or product cannot be empty");
        }
        Invoice invoice = this.invoiceRepository.findByInvoiceNumber(t.getInvoiceNumber());
        if (invoice != null) {
            throw new IllegalArgumentException("Invoice already exist.");
        }

        for (InvoiceDetails details : t.getInvoiceDetailses()) {
            details.setAuditInfo(t.getAuditInfo());
        }
        String newInvoiceNo = StringUtls.randomNumber(6);
        t.setInvoiceNumber(newInvoiceNo);

        updateCustomerAccount(t);
        return this.invoiceRepository.save(t);

    }

    //calculate customer balance forwards
    private void updateCustomerAccount(Invoice invoice) {

        CustomerAccount customerAccount = this.customerAccountRepository.findByCode(invoice.getCustomerCode());
        double totalAmt = 0.0;
        if (customerAccount != null) {
            for (InvoiceDetails details : invoice.getInvoiceDetailses()) {
                totalAmt += details.getQuantity() * details.getUnitPrice();
            }

            customerAccount.setBalanceForwared(totalAmt + customerAccount.getBalanceForwared());
            customerAccount.setAuditInfo(invoice.getAuditInfo());
            this.customerAccountRepository.save(customerAccount);
            totalAmt = 0.0;

        }

    }

    public void addAll(List<Invoice> list) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Transactional
    public void update(Invoice t) {
        this.updateCustomerAccount(t);
        this.invoiceRepository.save(t);
    }

    public void remove(Invoice t) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void removeBy(String id) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public Invoice find(String id) {
        return this.invoiceRepository.findOne(id);
    }

    public List<Invoice> findAll() {
        return this.invoiceRepository.findAll();
    }

    public List<Invoice> findWithPaging(int pageSize, int index) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public Invoice findByInvoiceNumber(String invoiceNumber) {
        return this.invoiceRepository.findByInvoiceNumber(invoiceNumber);
    }

    @Transactional
    public void reoccuranceTrigger() {
        List<Customer> listCustomer = this.customerManager.findAll();
        Invoice invoice = new Invoice();
        List<InvoiceDetails> listInvoiceDetails = new ArrayList<InvoiceDetails>();
        long defaultTax = 1;

        if (!listCustomer.isEmpty()) {
            for (Customer customer : listCustomer) {
                //invoice 
                String newInvoiceNo = StringUtls.randomNumber(6);
                invoice.setBillerCode(customer.getCode());
                invoice.setCustomerCode(customer.getCode());
                invoice.setInvoiceNumber(newInvoiceNo);
                invoice.setDate(new Date());
                //for invoice details
                for (CustomerService service : customer.getCustomerServices()) {
                    if (service.getFrequencyType().equals(CustomerService.FrequencyType.Monthly)) {
                        listInvoiceDetails.add(addInvoiceDetails(service));

                    }
                }

                invoice.addInvoiceDetails(listInvoiceDetails);
                updateCustomerAccount(invoice);
                this.invoiceRepository.save(invoice);

            }
        }

    }

    private InvoiceDetails addInvoiceDetails(CustomerService service) {
        InvoiceDetails invoiceDetails = new InvoiceDetails();
        Product product = this.productManager.findByCode(service.getProductCode());
        if (product != null) {
            // invoice details
            invoiceDetails.setActive(true);
            invoiceDetails.setDefaultTax(product.getDefaultTax());
            invoiceDetails.setQuantity(service.getQuantity());
            invoiceDetails.setUnitPrice(product.getUnitPrice());
            invoiceDetails.setProductCode(product.getCode());
            invoiceDetails.setAuditInfo(service.getAuditInfo());
        }

        return invoiceDetails;
    }

}
