package com.itexpertnepal.simpleinvoice.ui.controller.role;

import com.itexpertnepal.simpleinvoice.api.common.RoleManager;
import com.itexpertnepal.simpleinvoice.domain.common.Role;
import com.itexpertnepal.simpleinvoice.spring.jsf.annotation.SpringViewScoped;
import com.itexpertnepal.simpleinvoice.ui.security.SpringSecurityUtility;
import com.itexpertnepal.simpleinvoice.utl.logger.Log;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.bridgeframework.utility.collection.CollectionUtility;
import org.omnifaces.util.Messages;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 *
 * @author binay
 */
@Component
@SpringViewScoped
public class RoleEditController {

    private Role role;
    private long selectedRoleId;
    @Autowired
    private SpringSecurityUtility securityUtility;
    @Autowired
    private RoleManager roleManager;
    @Log
    private Logger logger;
    private List<String> selectedUserPermission = new ArrayList<String>();
    private List<String> selectedRolePermission = new ArrayList<String>();

    public void loadRoles() {
        logger.debug("inside load roles");

        if (this.selectedRoleId != 0 || this.selectedRoleId > 0) {
            this.role = this.roleManager.find(selectedRoleId);
            if (role != null) {
                logger.info("Role Type:" + role.getRoleType());
                this.filterPermission();
                logger.info("Selected User Permission:" + this.selectedUserPermission.size());
                this.role.cleanAllPermission();

            }

        }
    }

    private void filterPermission() {
        this.selectedUserPermission.addAll(CollectionUtility.filter(this.role.permissionAsStringList(), "USER"));
        this.selectedRolePermission.addAll(CollectionUtility.filter(this.role.permissionAsStringList(), "ROLE"));
    }

    public String onUpdate() {
        logger.debug("Role Type:" + role.getRoleType());
        this.role.setCompanyCode(securityUtility.getPrinciple().getCompanyCode());
        this.role.getAuditInfo().setModifiedBy(securityUtility.getPrinciple().getUsername());
        this.role.getAuditInfo().setModifiedOn(new Date());
        if (securityUtility.getPrinciple().getRoleType().equals(Role.RoleType.CLIENT)) {
            this.role.setRoleType(Role.RoleType.CLIENT_USER);
        }
        this.addPermission();
        this.roleManager.update(role);
        Messages.addInfo(null, "Role Edit Sucessfully " + " done");
        return "pretty:roles";
    }

    public void addPermission() {
        role.addPermission(selectedUserPermission);
        role.addPermission(selectedRolePermission);
    }

    public Role getRole() {
        return role;
    }

    public void setRole(Role role) {
        this.role = role;
    }

    public long getSelectedRoleId() {
        return selectedRoleId;
    }

    public void setSelectedRoleId(long selectedRoleId) {
        this.selectedRoleId = selectedRoleId;
    }

    public List<String> getSelectedUserPermission() {
        return selectedUserPermission;
    }

    public void setSelectedUserPermission(List<String> selectedUserPermission) {
        this.selectedUserPermission = selectedUserPermission;
    }

    public List<String> getSelectedRolePermission() {
        return selectedRolePermission;
    }

    public void setSelectedRolePermission(List<String> selectedRolePermission) {
        this.selectedRolePermission = selectedRolePermission;
    }

}
